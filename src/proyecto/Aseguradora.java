/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto;

import controlador.AseguradoraDAO;
import controlador.ConductorDAO;
import controlador.Conexion;
import java.awt.Color;
import java.sql.Connection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.AseguradoraVO;
import modelo.ConductorVO;

/**
 *
 * @author Usuario
 */
public class Aseguradora extends javax.swing.JFrame {
private Connection conexion;
    private Conexion conector;
    /**
     * Creates new form Aseguradora
     */
    //crea las variables que van a almacenar los datos
    String  nombre;
    int codigo;
    boolean estado;
    Date vigLin;
    String id2;
    
    //se crea un arraylist con los datos almacenados en aseguradoravo 
    ArrayList<AseguradoraVO> datosAseguradora;
    
    //arraylist para guardar los datos en la tabla
    ArrayList<String> datosInicio;
    
    //transAseguradora guarda los datos que manda aseguradoravo
    AseguradoraVO transAseguradora;
    
    //variable que almacena el id del funcionario
    String id_func="";
    
    //se nombra la tabla 
    DefaultTableModel modelo;
    
    //k
    int nivel,posicionUsuario = -1;
    
    //constante para saber si esta guardando un archivo editado
    boolean guardarEditar=false;
    
    //se encarga de recibir los datos para la base de datos
    AseguradoraDAO BDAseguradora;
    
    //arraylist para guardar los datos en la tabla
    ArrayList<String> datosAseguradoraTabla;
    
    public Aseguradora() {
        initComponents();
       
        
        this.getContentPane().setBackground(Color.WHITE);
        setLocationRelativeTo(null);
        bloquearCajas();
       
        BDAseguradora=new AseguradoraDAO();
        

        
        datosAseguradora=new ArrayList<AseguradoraVO>();
        datosInicio=new ArrayList<String>();
        datosAseguradoraTabla=new ArrayList<String>();
        datosAseguradoraTabla=BDAseguradora.buscarAseguradora();
        datosInicio=BDAseguradora.buscarAseguradora();
       
        
        modelo = new DefaultTableModel();
        modelo.addColumn("Codigo");
        modelo.addColumn("Nombre");
        //modelo.addColumn("Edad");
        this.jTAseg.setModel(modelo);
        this.jTAseg.getColumn(jTAseg.getColumnName(0)).setMaxWidth(100);
        this.jTAseg.getColumn(jTAseg.getColumnName(1)).setMaxWidth(200);
         BDAseguradora=new AseguradoraDAO();
         cargarTablaInicio();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTFCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTFNombre = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAseg = new javax.swing.JTable();
        jBNuevo = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jBBuscar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jBEditar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Aseguradora");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ingreso Aseguradora", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Codigo");

        jTFCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTFCodigoKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setText("Nombre:");

        jTAseg.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jTAseg.setForeground(new java.awt.Color(255, 255, 255));
        jTAseg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTAseg.setEnabled(false);
        jScrollPane1.setViewportView(jTAseg);

        jBNuevo.setBackground(new java.awt.Color(255, 255, 255));
        jBNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/nuevo.png"))); // NOI18N
        jBNuevo.setBorder(null);
        jBNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNuevoActionPerformed(evt);
            }
        });

        jBGuardar.setBackground(new java.awt.Color(255, 255, 255));
        jBGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/guardar.png"))); // NOI18N
        jBGuardar.setBorder(null);
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jBBuscar.setBackground(new java.awt.Color(255, 255, 255));
        jBBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/buscar.png"))); // NOI18N
        jBBuscar.setBorder(null);
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jBEliminar.setBackground(new java.awt.Color(255, 255, 255));
        jBEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/eliminar.png"))); // NOI18N
        jBEliminar.setBorder(null);
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(255, 255, 255));
        jButton11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton11.setText("Salir");
        jButton11.setBorder(null);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jBEditar.setBackground(new java.awt.Color(255, 255, 255));
        jBEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/editar.png"))); // NOI18N
        jBEditar.setBorder(null);
        jBEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTFNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 236, Short.MAX_VALUE)
                            .addComponent(jTFCodigo)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jBNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBEditar, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 339, Short.MAX_VALUE)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTFCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jTFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jBEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jBNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jBBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jBEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 128, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 public void bloquearCajas(){
        jTFCodigo.setEnabled(false);
        jTFNombre.setEnabled(false);
        jBGuardar.setEnabled(false);
        jBNuevo.setEnabled(true);
        jBEditar.setEnabled(true);
        jBEliminar.setEnabled(true);
        jBBuscar.setEnabled(true);
        
    }
 
  public void obIDFunc(String id){
        id_func=id;
    }
    
  public void cargarTablaInicio(){
      //ver nos sirve para saber si en la posicion que le vamos a pedir es igual a 1 o a 0
      String ver;
        
        for (int i = 0; i < datosAseguradoraTabla.size(); i=i+3) {
            //captura el dato de la base de datos y lo compara para saber a que equivale
            ver=datosAseguradoraTabla.get(i+2);
            //la decision nos dice que si ver es igual a uno(1) cargue los datos que se encuentran en la base de datos
            if (ver.equals("1")) {
                
            //se cargan los datos a la tabla    
              String[] datos=new String[2];
            datos[0]=datosAseguradoraTabla.get(i);
            datos[1]=datosAseguradoraTabla.get(i+1);
            modelo.addRow(datos);  
            
            codigo = Integer.parseInt(datosAseguradoraTabla.get(i));
            nombre = datosAseguradoraTabla.get(i+1);
           estado=true;
             
            
             
            transAseguradora = new AseguradoraVO(codigo, nombre,id_func, estado);
            datosAseguradora.add(transAseguradora);
            
            }
            
        }
       
 }
    private void jBNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNuevoActionPerformed
        activarCajas();
    }//GEN-LAST:event_jBNuevoActionPerformed
public void activarCajas(){
        
         jTFCodigo.setEnabled(true);
        jTFNombre.setEnabled(true);
        jBGuardar.setEnabled(true);
        jBNuevo.setEnabled(false);
        jBEditar.setEnabled(false);
        jBEliminar.setEnabled(false);
        jBBuscar.setEnabled(false);
      
        
    }
    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        //esta decision se usa para saber si esta g¿ingresando como archivo nuevo o editado        
        if(guardarEditar==false){

            if (guardarDatos() == true) {
                JOptionPane.showMessageDialog(null,
                    "Guardado con exito...");
                posicionUsuario=-1;
                cargarTabla();
                limpiarCajas();
                bloquearCajas();

            } else {
                JOptionPane.showMessageDialog(null,
                    "Error de datos");
            }

        }else{

            if(modificarDatos()==true){
                JOptionPane.showMessageDialog(null,
                    "Modificado con exito...");
                limpiarCajas();
                bloquearCajas();
                guardarEditar=false;
            }else {
                JOptionPane.showMessageDialog(null,
                    "Error de datos");
            }
        }
    }//GEN-LAST:event_jBGuardarActionPerformed
  
      

    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed
        try {
            String buscaIdent = JOptionPane.showInputDialog(
                "Ingresar Identificación para editar");
            buscarUsuario(buscaIdent);
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jBBuscarActionPerformed

    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
        try {
            String buscaIdent = JOptionPane.showInputDialog("Ingresar identificacion para eliminar");
            //se llama el metodo buscarUsuarioEditar y se envia la variable buscaident la cual posee la identificacion
            buscarUsuarioElm(buscaIdent);
        } catch (Exception e) {
            System.err.println(e);
        }
    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jTFCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCodigoKeyTyped
 char caracter = evt.getKeyChar();

        if ((caracter < '0' || caracter > '9')
                && (caracter != '\b'/*corresponde a Back_space*/)
                && (caracter != '.')) {
            evt.consume();//ignota el evento del teclado
        }
    }//GEN-LAST:event_jTFCodigoKeyTyped

    private void jBEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEditarActionPerformed

  try {
            String buscaIdent = JOptionPane.showInputDialog(
                    "Ingresar Identificación para editar");
            buscarUsuarioEditar(buscaIdent);
        } catch (Exception e) {
            System.err.println(e);
        }


    }//GEN-LAST:event_jBEditarActionPerformed

    /**
     * @param args the command line arguments
     */
    public void limpiarCajas() {
        jTFCodigo.setText("");
        jTFNombre.setText("");
    }
     public void buscarUsuario(String busUsu) {
        boolean verificarUsu = false;
        if (datosAseguradora.isEmpty()) {
            JOptionPane.showMessageDialog(null, 
                    "No hay Usuarios Registrados");
        } else {
            for (int i = 0; i < datosAseguradora.size(); i++) {

                if ((datosAseguradora.get(i).getCodigo()+"").equals(busUsu)) {
                    verificarUsu = true;
                    JOptionPane.showMessageDialog(null,
                            "Información de Usuario:\nCodigo: "
                            +datosAseguradora.get(i).getCodigo()+"\nNombre: "
                            +datosAseguradora.get(i).getNombre());        
                           
                    

                    
                }
            }

            if (verificarUsu == false) {
                JOptionPane.showMessageDialog(null, "Identificación Incorrecta");
            }

        }
    }
       public void buscarUsuarioEditar(String busUsu) {
        boolean verificar = false;
        //compara el dato para saber si esta vacio
        if (datosAseguradora.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No hay Usuarios Registrados");
        } else {
            for (int i = 0; i < datosAseguradora.size(); i++) {
             //compara el data ingresado con el que hay en los datos
                if ((datosAseguradora.get(i).getCodigo()+"").equals(busUsu)) {
                    posicionUsuario = i;
                    guardarEditar=true;
                    activarCajas();
                    
                    verificar = true;
                    //manda los datos a las cajas de texto
                    jTFCodigo.setText(""+datosAseguradora.get(i).getCodigo());
                    id2=(datosAseguradora.get(i).getCodigo()+"");
                    jTFNombre.setText(datosAseguradora.get(i).getNombre());
                }
            }

            if (verificar == false) {
                JOptionPane.showMessageDialog(null, "Identificación Incorrecta");
            }
            verificar = false;
        }
    }
    public boolean guardarDatos(){
          //valida los campos apartir del metodo validarCajas 
         if (validarCajas() == true) {
        //captura los datos correspondientes a las cajas                 
            codigo = Integer.parseInt(jTFCodigo.getText());
            nombre = jTFNombre.getText();
            estado=true;
            transAseguradora = new AseguradoraVO(codigo, nombre,id_func, estado);
            
        //ingresa los datos capturados en trans ¿Estudiante a datosEstudiante           
            datosAseguradora.add(transAseguradora);
//            se envian los datos que se encuentran en aseguradoraVO(transAseguradora) al metodo ingresarFuncionario que se encuentra en la clase aseguradoraDAO
            BDAseguradora.ingresarAseguradora(transAseguradora);
            return true;
        } else {
            return false;
        }
    
    }
      public void buscarUsuarioElm(String busUsu) {
             boolean verificar = false;
        if (datosAseguradora.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No hay Usuarios Registrados");
        } else {
            
            for (int i = 0; i < datosAseguradora.size(); i++) {

                if ((datosAseguradora.get(i).getCodigo()+"").equals(busUsu)) {  
                     posicionUsuario = i;
                     id2=(datosAseguradora.get(i).getCodigo()+"");
                     System.out.println(id2);
                      BDAseguradora.eliminarAseguradora(id2);
                    datosAseguradora.remove(posicionUsuario);
                    verificar = true;
                     for (int j= jTAseg.getRowCount(); j >=0; j--) {
            modelo.removeRow(i);    
            }
                     
                    for (int j = 0; j < datosAseguradora.size(); j++) {
                String[] datos = new String[2];
        datos[0] = (""+datosAseguradora.get(j).getCodigo());
        datos[1] = datosAseguradora.get(j).getNombre();
        modelo.addRow(datos);
        
       }
                  
                }
            }

            if (verificar == false) {
                JOptionPane.showMessageDialog(null, "Cedula Incorrecta");
            }
            verificar = false;
        }
                 
          
      
      }
      
      
       public boolean modificarDatos() {
        
        if (validarCajas() == true) {
            //toma los datos de las cajas de texto            
            codigo = Integer.parseInt(jTFCodigo.getText());
            nombre = jTFNombre.getText();
            estado=true;
            transAseguradora = new AseguradoraVO(codigo, nombre, id_func, estado);
            
            datosAseguradora.set(posicionUsuario,transAseguradora);
                       
            BDAseguradora.editarAseguradora(transAseguradora,id2);
            //al capturar el dato lo quita de la tabla mientras edita
            for (int i = jTAseg.getRowCount()-1; i >=0; i--) {
            modelo.removeRow(i);    
            }
              
             //carga los datos a la tabla nuevamente
            for (int i = 0; i < datosAseguradora.size(); i++) {
                String[] datos = new String[2];
        datos[0] = (datosAseguradora.get(i).getCodigo()+"");
        datos[1] = datosAseguradora.get(i).getNombre();
        modelo.addRow(datos);
            }
                  
                    
            
            return true;
        } else {
            return false;
        }
    }
      
      
      public boolean validarCajas() {
        
        if (jTFCodigo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Ingresar Codigo De SOAT");
            return false;
        } else if (jTFNombre.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Ingresar Nombre");
            return false;
        } else {
            return true;
        }
    }
       public void cargarTabla() {
        //hace un array con capacidad de la cantidad de datos que se ingresan en la tabla            
        String[] datos = new String[2];
        datos[0] = codigo+"";
        datos[1] = nombre;
        modelo.addRow(datos);
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Aseguradora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Aseguradora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Aseguradora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Aseguradora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Aseguradora().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBEditar;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBNuevo;
    private javax.swing.JButton jButton11;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTAseg;
    private javax.swing.JTextField jTFCodigo;
    private javax.swing.JTextField jTFNombre;
    // End of variables declaration//GEN-END:variables

    private String String(int codigo) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
